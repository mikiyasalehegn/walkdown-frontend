// src/services/pdfService.js
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

export const exportChecklistToPDF = (items, position, shiftInfo, remarks) => {
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(18);
  doc.text("SIEMENS ENERGY WALKDOWN CHECKLIST", 105, 15, { align: "center" });
  
  // Header info
  doc.setFontSize(12);
  const positionName = position === 'operator' ? 'Operator' : 'Shift Manager';
  doc.text(`Position: ${positionName}`, 14, 25);
  
  // Format shift info
  const shiftNames = {
    morning: 'Morning Shift',
    evening: 'Evening Shift',
    night: 'Night Shift',
    weekend: 'Weekend Shift',
    'morning-12hr': 'Weekend Morning 12hr',
    'night-12hr': 'Weekend Night 12hr'
  };
  
  let shiftText = shiftNames[shiftInfo.shiftType] || shiftInfo.shiftType;
  if (shiftInfo.shiftType === 'weekend') {
    shiftText += ` (${shiftNames[shiftInfo.weekendShiftType]})`;
  }
  
  doc.text(`Shift: ${shiftText}`, 14, 32);
  
  // Format date
  const date = new Date(shiftInfo.date);
  const formattedDate = date.toLocaleDateString('en-GB', {
    day: 'numeric',
    month: 'short',
    year: 'numeric'
  });
  doc.text(`Date: ${formattedDate}`, 14, 39);
  
  // Prepare table data with styles
  const tableData = [];
  const cellStyles = [];
  
  items.forEach(item => {
    // Create value display text
    let valueText = item.value;
    if (item.unit) {
      valueText += ` ${item.unit}`;
    }
    
    // Determine cell style based on validation
    let textColor = [0, 0, 0]; // Default black
    let fontStyle = 'normal';
    
    // For dropdown options
    if (item.options) {
      if (item.value === 'OK' || item.value === 'ABSENT') {
        textColor = [40, 167, 69]; // Green
        fontStyle = 'bold';
      } else if (item.value === 'NO' || item.value === 'PRESENT') {
        textColor = [220, 53, 69]; // Red
        fontStyle = 'bold';
      }
    } 
    // For numeric inputs
    else if (item.min !== undefined && item.max !== undefined) {
      if (item.allowSlash && item.value.includes('/')) {
        const parts = item.value.split('/');
        if (parts.length === 2) {
          const part1 = parseFloat(parts[0]);
          const part2 = parseFloat(parts[1]);
          if (
            !isNaN(part1) && 
            !isNaN(part2) &&
            part1 >= item.min && part1 <= item.max &&
            part2 >= item.min && part2 <= item.max
          ) {
            textColor = [40, 167, 69]; // Green
            fontStyle = 'bold';
          } else {
            textColor = [220, 53, 69]; // Red
            fontStyle = 'bold';
          }
        }
      } else {
        const numValue = parseFloat(item.value);
        if (!isNaN(numValue)) {
          if (numValue >= item.min && numValue <= item.max) {
            textColor = [40, 167, 69]; // Green
            fontStyle = 'bold';
          } else {
            textColor = [220, 53, 69]; // Red
            fontStyle = 'bold';
          }
        }
      }
    }
    
    tableData.push([
      item.location,
      item.kks,
      item.check,
      valueText
    ]);
    
    // Apply style only to the value column (index 3)
    cellStyles.push({}, {}, {}, {
      textColor,
      fontStyle
    });
  });
  
  // Create table
  doc.autoTable({
    head: [['Location', 'KKS', 'Check', 'Value']],
    body: tableData,
    startY: 45,
    styles: {
      fontSize: 8,
      cellPadding: 2,
    },
    columnStyles: {
      0: { cellWidth: 60 },
      1: { cellWidth: 40 },
      2: { cellWidth: 30 },
      3: { cellWidth: 40 },
    },
    bodyStyles: cellStyles,
  });
  
  // Add remarks if any
  if (remarks) {
    const finalY = doc.lastAutoTable.finalY + 10;
    doc.setFontSize(12);
    doc.text('Remarks:', 14, finalY);
    doc.setFontSize(10);
    
    const maxWidth = 180;
    const lineHeight = 7;
    const splitRemarks = doc.splitTextToSize(remarks, maxWidth);
    
    doc.text(splitRemarks, 14, finalY + 5);
  }
  
  // Footer
  const pageHeight = doc.internal.pageSize.height;
  doc.setFontSize(8);
  doc.text(
    "Generated by Siemens Energy Alon-Gat Walkdown System",
    105,
    pageHeight - 10,
    { align: "center" }
  );
  
  // Save PDF
  doc.save(`walkdown_checklist_${new Date().toISOString().slice(0, 10)}.pdf`);
};