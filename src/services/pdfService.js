// src/services/pdfService.js
// Using global jsPDF from CDN

export const exportChecklistToPDF = (items, position, shiftInfo, remarks) => {
  try {
    // Check if jsPDF is available globally
    if (typeof window.jspdf === 'undefined') {
      throw new Error('jsPDF library not loaded. Please refresh the page.');
    }

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Title
    doc.setFontSize(18);
    doc.text("SIEMENS ENERGY WALKDOWN CHECKLIST", 105, 15, { align: "center" });
    
    // Header info
    doc.setFontSize(12);
    const positionName = position === 'operator' ? 'Operator' : 'Shift Manager';
    doc.text(`Position: ${positionName}`, 14, 25);
    
    // Format shift info
    const shiftNames = {
      morning: 'Morning Shift',
      evening: 'Evening Shift',
      night: 'Night Shift',
      weekend: 'Weekend Shift',
      'morning-12hr': 'Weekend Morning 12hr',
      'night-12hr': 'Weekend Night 12hr'
    };
    
    let shiftText = shiftNames[shiftInfo.shiftType] || shiftInfo.shiftType;
    if (shiftInfo.shiftType === 'weekend') {
      shiftText += ` (${shiftNames[shiftInfo.weekendShiftType]})`;
    }
    
    doc.text(`Shift: ${shiftText}`, 14, 32);
    
    // Format date
    const date = new Date(shiftInfo.date);
    const formattedDate = date.toLocaleDateString('en-GB', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    });
    doc.text(`Date: ${formattedDate}`, 14, 39);
    
    // Prepare table data
    const tableData = [];
    
    items.forEach(item => {
      // Create value display text
      let valueText = item.value || 'Not filled';
      if (item.unit && item.value) {
        valueText += ` ${item.unit}`;
      }
      
      tableData.push([
        item.location,
        item.kks || '',
        item.check,
        valueText
      ]);
    });
    
    // Create table using autoTable
    if (typeof doc.autoTable === 'function') {
      doc.autoTable({
        head: [['Location', 'KKS', 'Check', 'Value']],
        body: tableData,
        startY: 45,
        styles: {
          fontSize: 8,
          cellPadding: 2,
        },
        columnStyles: {
          0: { cellWidth: 60 },
          1: { cellWidth: 40 },
          2: { cellWidth: 30 },
          3: { cellWidth: 40 },
        },
      });
    } else {
      // Fallback if autoTable is not available
      console.warn('autoTable not available, using simple table');
      // Add simple table manually
      let yPos = 45;
      tableData.forEach((row, index) => {
        if (index === 0) {
          // Header
          doc.setFontSize(10);
          doc.setFont(undefined, 'bold');
          doc.text('Location', 14, yPos);
          doc.text('KKS', 74, yPos);
          doc.text('Check', 114, yPos);
          doc.text('Value', 144, yPos);
          yPos += 10;
        }
        
        doc.setFontSize(8);
        doc.setFont(undefined, 'normal');
        doc.text(row[0], 14, yPos);
        doc.text(row[1], 74, yPos);
        doc.text(row[2], 114, yPos);
        doc.text(row[3], 144, yPos);
        yPos += 8;
        
        if (yPos > 280) {
          doc.addPage();
          yPos = 20;
        }
      });
    }
    
    // Add remarks if any
    if (remarks && remarks.trim()) {
      const finalY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 200;
      doc.setFontSize(12);
      doc.text('Remarks:', 14, finalY);
      doc.setFontSize(10);
      
      const maxWidth = 180;
      const splitRemarks = doc.splitTextToSize(remarks, maxWidth);
      
      doc.text(splitRemarks, 14, finalY + 5);
    }
    
    // Footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(8);
    doc.text(
      "Generated by Siemens Energy Alon-Gat Walkdown System",
      105,
      pageHeight - 10,
      { align: "center" }
    );
    
    // Save PDF
    const fileName = `walkdown_checklist_${new Date().toISOString().slice(0, 10)}.pdf`;
    doc.save(fileName);
    
    return fileName;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error(`Failed to generate PDF: ${error.message}`);
  }
};